/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MatchResults } from "@stencil-community/router";
export namespace Components {
    interface AppHome {
    }
    interface AppProfile {
        "match": MatchResults;
    }
    interface AppRoot {
    }
    interface EncryptFileFlowRoot {
    }
    interface EncryptFileFlowStepCounter {
        "count": number;
    }
    interface EncryptFileFlowStepOne {
        "hideWordsStr": string;
        "nextStep": () => void;
        "updateHideWordsStr": (str: string) => void;
    }
    interface EncryptFileFlowStepThree {
        "file": File;
        "hideWordsStr": string;
    }
    interface EncryptFileFlowStepTwo {
        "file": File;
        "nextStep": () => void;
        "updateFile": (file: File) => void;
    }
    interface FormButton {
        "disabled"?: boolean;
        "handleClick"?: () => void;
        "type"?: string;
        "variant"?: 'solid' | 'outline';
    }
    interface FormInputField {
        "handleChange": (s: string) => void;
        "value": string;
    }
    interface FormUploadFile {
        "file": File;
        "updateErrors": (error: { invalidFileType: boolean; isMoreThan1Mb: boolean }) => void;
        "updateFile": (file: File) => void;
    }
    interface LayoutHeader {
    }
    interface LayoutMain {
    }
    interface LayoutSidebar {
        "currentStep": number;
    }
    interface LayoutSidebarListItem {
        "index": number;
        "isActive": boolean;
    }
    interface TypographyHeading {
        "color": 'primary' | 'accent' | 'gray';
        "size": 'medium' | 'big';
    }
    interface TypographyText {
        "color": 'primary' | 'accent' | 'gray' | 'warning' | 'success';
        "size": 'small' | 'medium';
    }
}
declare global {
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLEncryptFileFlowRootElement extends Components.EncryptFileFlowRoot, HTMLStencilElement {
    }
    var HTMLEncryptFileFlowRootElement: {
        prototype: HTMLEncryptFileFlowRootElement;
        new (): HTMLEncryptFileFlowRootElement;
    };
    interface HTMLEncryptFileFlowStepCounterElement extends Components.EncryptFileFlowStepCounter, HTMLStencilElement {
    }
    var HTMLEncryptFileFlowStepCounterElement: {
        prototype: HTMLEncryptFileFlowStepCounterElement;
        new (): HTMLEncryptFileFlowStepCounterElement;
    };
    interface HTMLEncryptFileFlowStepOneElement extends Components.EncryptFileFlowStepOne, HTMLStencilElement {
    }
    var HTMLEncryptFileFlowStepOneElement: {
        prototype: HTMLEncryptFileFlowStepOneElement;
        new (): HTMLEncryptFileFlowStepOneElement;
    };
    interface HTMLEncryptFileFlowStepThreeElement extends Components.EncryptFileFlowStepThree, HTMLStencilElement {
    }
    var HTMLEncryptFileFlowStepThreeElement: {
        prototype: HTMLEncryptFileFlowStepThreeElement;
        new (): HTMLEncryptFileFlowStepThreeElement;
    };
    interface HTMLEncryptFileFlowStepTwoElement extends Components.EncryptFileFlowStepTwo, HTMLStencilElement {
    }
    var HTMLEncryptFileFlowStepTwoElement: {
        prototype: HTMLEncryptFileFlowStepTwoElement;
        new (): HTMLEncryptFileFlowStepTwoElement;
    };
    interface HTMLFormButtonElement extends Components.FormButton, HTMLStencilElement {
    }
    var HTMLFormButtonElement: {
        prototype: HTMLFormButtonElement;
        new (): HTMLFormButtonElement;
    };
    interface HTMLFormInputFieldElement extends Components.FormInputField, HTMLStencilElement {
    }
    var HTMLFormInputFieldElement: {
        prototype: HTMLFormInputFieldElement;
        new (): HTMLFormInputFieldElement;
    };
    interface HTMLFormUploadFileElement extends Components.FormUploadFile, HTMLStencilElement {
    }
    var HTMLFormUploadFileElement: {
        prototype: HTMLFormUploadFileElement;
        new (): HTMLFormUploadFileElement;
    };
    interface HTMLLayoutHeaderElement extends Components.LayoutHeader, HTMLStencilElement {
    }
    var HTMLLayoutHeaderElement: {
        prototype: HTMLLayoutHeaderElement;
        new (): HTMLLayoutHeaderElement;
    };
    interface HTMLLayoutMainElement extends Components.LayoutMain, HTMLStencilElement {
    }
    var HTMLLayoutMainElement: {
        prototype: HTMLLayoutMainElement;
        new (): HTMLLayoutMainElement;
    };
    interface HTMLLayoutSidebarElement extends Components.LayoutSidebar, HTMLStencilElement {
    }
    var HTMLLayoutSidebarElement: {
        prototype: HTMLLayoutSidebarElement;
        new (): HTMLLayoutSidebarElement;
    };
    interface HTMLLayoutSidebarListItemElement extends Components.LayoutSidebarListItem, HTMLStencilElement {
    }
    var HTMLLayoutSidebarListItemElement: {
        prototype: HTMLLayoutSidebarListItemElement;
        new (): HTMLLayoutSidebarListItemElement;
    };
    interface HTMLTypographyHeadingElement extends Components.TypographyHeading, HTMLStencilElement {
    }
    var HTMLTypographyHeadingElement: {
        prototype: HTMLTypographyHeadingElement;
        new (): HTMLTypographyHeadingElement;
    };
    interface HTMLTypographyTextElement extends Components.TypographyText, HTMLStencilElement {
    }
    var HTMLTypographyTextElement: {
        prototype: HTMLTypographyTextElement;
        new (): HTMLTypographyTextElement;
    };
    interface HTMLElementTagNameMap {
        "app-home": HTMLAppHomeElement;
        "app-profile": HTMLAppProfileElement;
        "app-root": HTMLAppRootElement;
        "encrypt-file-flow-root": HTMLEncryptFileFlowRootElement;
        "encrypt-file-flow-step-counter": HTMLEncryptFileFlowStepCounterElement;
        "encrypt-file-flow-step-one": HTMLEncryptFileFlowStepOneElement;
        "encrypt-file-flow-step-three": HTMLEncryptFileFlowStepThreeElement;
        "encrypt-file-flow-step-two": HTMLEncryptFileFlowStepTwoElement;
        "form-button": HTMLFormButtonElement;
        "form-input-field": HTMLFormInputFieldElement;
        "form-upload-file": HTMLFormUploadFileElement;
        "layout-header": HTMLLayoutHeaderElement;
        "layout-main": HTMLLayoutMainElement;
        "layout-sidebar": HTMLLayoutSidebarElement;
        "layout-sidebar-list-item": HTMLLayoutSidebarListItemElement;
        "typography-heading": HTMLTypographyHeadingElement;
        "typography-text": HTMLTypographyTextElement;
    }
}
declare namespace LocalJSX {
    interface AppHome {
    }
    interface AppProfile {
        "match"?: MatchResults;
    }
    interface AppRoot {
    }
    interface EncryptFileFlowRoot {
    }
    interface EncryptFileFlowStepCounter {
        "count"?: number;
    }
    interface EncryptFileFlowStepOne {
        "hideWordsStr"?: string;
        "nextStep"?: () => void;
        "updateHideWordsStr"?: (str: string) => void;
    }
    interface EncryptFileFlowStepThree {
        "file"?: File;
        "hideWordsStr"?: string;
    }
    interface EncryptFileFlowStepTwo {
        "file"?: File;
        "nextStep"?: () => void;
        "updateFile"?: (file: File) => void;
    }
    interface FormButton {
        "disabled"?: boolean;
        "handleClick"?: () => void;
        "type"?: string;
        "variant"?: 'solid' | 'outline';
    }
    interface FormInputField {
        "handleChange"?: (s: string) => void;
        "value"?: string;
    }
    interface FormUploadFile {
        "file"?: File;
        "updateErrors"?: (error: { invalidFileType: boolean; isMoreThan1Mb: boolean }) => void;
        "updateFile"?: (file: File) => void;
    }
    interface LayoutHeader {
    }
    interface LayoutMain {
    }
    interface LayoutSidebar {
        "currentStep"?: number;
    }
    interface LayoutSidebarListItem {
        "index"?: number;
        "isActive"?: boolean;
    }
    interface TypographyHeading {
        "color"?: 'primary' | 'accent' | 'gray';
        "size"?: 'medium' | 'big';
    }
    interface TypographyText {
        "color"?: 'primary' | 'accent' | 'gray' | 'warning' | 'success';
        "size"?: 'small' | 'medium';
    }
    interface IntrinsicElements {
        "app-home": AppHome;
        "app-profile": AppProfile;
        "app-root": AppRoot;
        "encrypt-file-flow-root": EncryptFileFlowRoot;
        "encrypt-file-flow-step-counter": EncryptFileFlowStepCounter;
        "encrypt-file-flow-step-one": EncryptFileFlowStepOne;
        "encrypt-file-flow-step-three": EncryptFileFlowStepThree;
        "encrypt-file-flow-step-two": EncryptFileFlowStepTwo;
        "form-button": FormButton;
        "form-input-field": FormInputField;
        "form-upload-file": FormUploadFile;
        "layout-header": LayoutHeader;
        "layout-main": LayoutMain;
        "layout-sidebar": LayoutSidebar;
        "layout-sidebar-list-item": LayoutSidebarListItem;
        "typography-heading": TypographyHeading;
        "typography-text": TypographyText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "encrypt-file-flow-root": LocalJSX.EncryptFileFlowRoot & JSXBase.HTMLAttributes<HTMLEncryptFileFlowRootElement>;
            "encrypt-file-flow-step-counter": LocalJSX.EncryptFileFlowStepCounter & JSXBase.HTMLAttributes<HTMLEncryptFileFlowStepCounterElement>;
            "encrypt-file-flow-step-one": LocalJSX.EncryptFileFlowStepOne & JSXBase.HTMLAttributes<HTMLEncryptFileFlowStepOneElement>;
            "encrypt-file-flow-step-three": LocalJSX.EncryptFileFlowStepThree & JSXBase.HTMLAttributes<HTMLEncryptFileFlowStepThreeElement>;
            "encrypt-file-flow-step-two": LocalJSX.EncryptFileFlowStepTwo & JSXBase.HTMLAttributes<HTMLEncryptFileFlowStepTwoElement>;
            "form-button": LocalJSX.FormButton & JSXBase.HTMLAttributes<HTMLFormButtonElement>;
            "form-input-field": LocalJSX.FormInputField & JSXBase.HTMLAttributes<HTMLFormInputFieldElement>;
            "form-upload-file": LocalJSX.FormUploadFile & JSXBase.HTMLAttributes<HTMLFormUploadFileElement>;
            "layout-header": LocalJSX.LayoutHeader & JSXBase.HTMLAttributes<HTMLLayoutHeaderElement>;
            "layout-main": LocalJSX.LayoutMain & JSXBase.HTMLAttributes<HTMLLayoutMainElement>;
            "layout-sidebar": LocalJSX.LayoutSidebar & JSXBase.HTMLAttributes<HTMLLayoutSidebarElement>;
            "layout-sidebar-list-item": LocalJSX.LayoutSidebarListItem & JSXBase.HTMLAttributes<HTMLLayoutSidebarListItemElement>;
            "typography-heading": LocalJSX.TypographyHeading & JSXBase.HTMLAttributes<HTMLTypographyHeadingElement>;
            "typography-text": LocalJSX.TypographyText & JSXBase.HTMLAttributes<HTMLTypographyTextElement>;
        }
    }
}
